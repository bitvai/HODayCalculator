@page "/"
@inject IConfiguration configuration

<PageTitle>Index</PageTitle>

  <h1>Kivehető home office napok száma 2022</h1>
  <div class="row">
    <div class="col-sm-auto col-md-auto col-lg-auto">
        <RadzenCard>
            <h4 class="mb-2">Hónap</h4>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@selectedMonth Placeholder="Hónap" Data=@(workingDays.Select(c => c.MonthName)) Change=@(args => OnMonthChange((string)args, "Month selected"))>

            </RadzenDropDown>
            <h4 class="mb-4 mt-2">Munkanapok száma:@workingDaysInMonth</h4>
            <h4 class="mb-3 mt-3">Szabadságos napok száma:</h4>
            <RadzenNumeric TValue="int" Value=@holidayDays Min="0" Max=@maxHolidays Change=@(args => OnHolidayChange((int)args, "Holidays")) class="w-100" />
            <RadzenButton class="mt-3" Click=@(args => OnClick("Success button ")) Text="Számolj" ButtonStyle="ButtonStyle.Success" />
            <h4 class="mt-3 @hoVisible">Kivehető HO napok száma:@possibleHomeofficeDays</h4>
        </RadzenCard>
    </div>
    
  </div>


<EventConsole @ref=@console class="mt-4" />

@code {

  List<WorkingDaysInMonth> workingDays = new List<WorkingDaysInMonth>{
    new WorkingDaysInMonth("Január", 21),
    new WorkingDaysInMonth("Február", 20),
    new WorkingDaysInMonth("Március", 22),
    new WorkingDaysInMonth("Április", 19),
    new WorkingDaysInMonth("Május",22),
    new WorkingDaysInMonth("Június",21),
    new WorkingDaysInMonth("Július", 21),
    new WorkingDaysInMonth("Augusztus",23),
    new WorkingDaysInMonth("Szeptember",22),
    new WorkingDaysInMonth("Október", 21),
    new WorkingDaysInMonth("November",21),
    new WorkingDaysInMonth("December", 21)};

  string? selectedMonth;
  int workingDaysInMonth = 0;
  int maxHolidays = 0;
  int possibleHomeofficeDays = 0;
  int holidayDays = 0;
  string hoVisible = "invisible";

  EventConsole console;

  protected override void OnInitialized()
  {
      var current = DateTime.Now.Month;
      selectedMonth = workingDays[current-1].MonthName;
      workingDaysInMonth = workingDays[current-1].Days;
      maxHolidays = workingDaysInMonth;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    base.OnAfterRender(firstRender);
  }


  int CalculateHomeOfficeDays(int workDays, int holidays)
  {
    int num = (int) Math.Round((double) (workDays - holidays) / (double) workDays * 12.0);
    if (num < 1)
      num = 0;
    else if (num > 12)
      num = 12;
    
    return num;
  }


  void OnMonthChange(string value, string name)
  {
      workingDaysInMonth = GetWorkingDaysInMonth(value);
      maxHolidays = workingDaysInMonth;
      hoVisible = GetVisible(false);
      holidayDays = 0;
      possibleHomeofficeDays = 0;
      console.Log($"{name} value changed to {value}");
  }


  void OnHolidayChange(int value, string name)
  {
      holidayDays = value;
      hoVisible = GetVisible(false);
      console.Log($"{name} value changed to {value}");
  }

  void OnClick(string value)
  {
    hoVisible = GetVisible(true);
    possibleHomeofficeDays = CalculateHomeOfficeDays(workingDaysInMonth, holidayDays);

  }
  int GetWorkingDaysInMonth(string value)
  {
      var month = workingDays.FirstOrDefault(m => m.MonthName.Equals(value));
      if (month == null) 
      {
        return 0;
      }
      return month.Days;
  }
  
  string GetVisible(bool b)
  {
    if (b) return "visible";
    else return "invisible";
  }


  class WorkingDaysInMonth
  {
    public WorkingDaysInMonth(string month, int days)
    {
      MonthName = month;
      Days = days;
    }

    public string MonthName {get;}
    public int Days {get;}
  }
}


